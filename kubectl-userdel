#!/bin/bash


RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

SECRET_NAME="kube-user-passwords"
NAMESPACE="kube-system"


if [[ $# -ne 1 ]]; then
    echo -e "${RED}‚ùå kubectl userdel <username>${RESET}"
    exit 1
fi

USERNAME="$1"
CONTEXT="${USERNAME}-context"
ROLE_BINDING_NAME="${USERNAME}-role"

if ! kubectl config get-contexts -o name | grep -q "^${CONTEXT}$"; then
    echo -e "${RED}‚ùå User '${USERNAME}' not found.${RESET}"
    exit 1
fi

echo -e "${CYAN}üîπ Deleting user '${USERNAME}'...${RESET}"


kubectl delete csr "${USERNAME}-csr" --ignore-not-found --force --grace-period=0 >/dev/null 2>&1


kubectl config unset users."${USERNAME}" >/dev/null 2>&1
kubectl config unset contexts."${CONTEXT}" >/dev/null 2>&1


kubectl delete clusterrolebinding "${ROLE_BINDING_NAME}" --ignore-not-found --force --grace-period=0 >/dev/null 2>&1


SECRET_DATA=$(kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" -o jsonpath="{.data.users}" 2>/dev/null | base64 --decode)


if [[ -z "$SECRET_DATA" ]]; then
    echo -e "${RED}‚ùå Error: Unable to retrieve secret '$SECRET_NAME' in namespace '$NAMESPACE'.${RESET}"
    exit 1
fi


UPDATED_JSON=$(echo "$SECRET_DATA" | sed "/\"$USERNAME\" *:/d")


ENCODED_JSON=$(echo -n "$UPDATED_JSON" | base64 -w 0)
kubectl patch secret "$SECRET_NAME" -n "$NAMESPACE" --type='json' -p="[{'op': 'replace', 'path': '/data/users', 'value': \"$ENCODED_JSON\"}]" >/dev/null 2>&1

echo -e "${GREEN}‚úÖ User '${USERNAME}' deleted successfully.${RESET}"
exit 0
